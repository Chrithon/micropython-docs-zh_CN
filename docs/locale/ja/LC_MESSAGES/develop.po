# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014-2019, Damien P. George, Paul Sokolovsky, and
# contributors
# This file is distributed under the same license as the MicroPython
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MicroPython 1.10\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-05-01 11:03+0900\n"
"PO-Revision-Date: 2019-05-02 09:30+0900\n"
"Last-Translator: Minoru Inachi\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../develop/cmodules.rst:2
msgid "MicroPython external C modules"
msgstr "MicroPython 外部 C モジュール"

#: ../../develop/cmodules.rst:4
msgid ""
"When developing modules for use with MicroPython you may find you run "
"into limitations with the Python environment, often due to an inability "
"to access certain hardware resources or Python speed limitations."
msgstr ""
"MicroPython で使うモジュールを開発する際、Python 環境では壁に突き当たってしまう"
"ことがあります。これは多くの場合、特定のハードウェアリソースにアクセスできないとか、"
"Python の実行速度の遅さによるものです。"

#: ../../develop/cmodules.rst:8
msgid ""
"If your limitations can't be resolved with suggestions in "
":ref:`speed_python`, writing some or all of your module in C is a viable "
"option."
msgstr ""
":ref:`MicroPython 性能の最大化 <speed_python>` に提示しているもので解決できない場合、"
"モジュールの一部または全部を C 言語で書くのが現実的な解です。"

#: ../../develop/cmodules.rst:11
msgid ""
"If your module is designed to access or work with commonly available "
"hardware or libraries please consider implementing it inside the "
"MicroPython source tree alongside similar modules and submitting it as a "
"pull request. If however you're targeting obscure or proprietary systems "
"it may make more sense to keep this external to the main MicroPython "
"repository."
msgstr ""
"作ろうとしているモジュールが一般的に入手可能なハードウェアやライブラリで動くように"
"設計するのであれば、MicroPython ソースツリー中の似たモジュールに倣い、ソースツリー内で"
"実装して、プルリクエストを出すことを検討してください。ただし、よく知られていないシステム"
"た独自のシステムをターゲットにしている場合は、メインの MicroPython リポジトリの外部に"
"保持するほうが合理的です。"

#: ../../develop/cmodules.rst:17
msgid ""
"This chapter describes how to compile such external modules into the "
"MicroPython executable or firmware image."
msgstr ""
"この章では、そのような外部モジュールを MicroPython の実行ファイルまたはファーム"
"ウェアイメージにコンパイルする方法について説明します。"

#: ../../develop/cmodules.rst:22
msgid "Structure of an external C module"
msgstr "外部 C モジュールの構造"

#: ../../develop/cmodules.rst:24
msgid "A MicroPython user C module is a directory with the following files:"
msgstr "MicroPython のユーザー C モジュールは、次のファイルを含むディレクトリーです:"

#: ../../develop/cmodules.rst:26
msgid "``*.c`` and/or ``*.h`` source code files for your module."
msgstr "モジュールのソースコードファイルである ``*.c`` や ``*.h``。"

#: ../../develop/cmodules.rst:28
msgid ""
"These will typically include the low level functionality being "
"implemented and the MicroPython binding functions to expose the functions"
" and module(s)."
msgstr ""
"これらのファイルには通常、C言語レベルでの機能実装と、それを MicroPython の"
"公開関数/モジュールにバインディングするものから成っています。"

#: ../../develop/cmodules.rst:31
msgid ""
"Currently the best reference for writing these functions/modules is to "
"find similar modules within the MicroPython tree and use them as "
"examples."
msgstr ""
"現在のところ、このような関数/モジュールを書くための最良の参考資料は MicroPython "
"のソースツリー内で似たモジュールを見つけて、それらを例として使うことです。"

#: ../../develop/cmodules.rst:34
msgid "``micropython.mk`` contains the Makefile fragment for this module."
msgstr "``micropython.mk`` はモジュール用の Makefile の一部を含みます。"

#: ../../develop/cmodules.rst:36
msgid ""
"``$(USERMOD_DIR)`` is available in ``micropython.mk`` as the path to your"
" module directory. As it's redefined for each c module, is should be "
"expanded in your ``micropython.mk`` to a local make variable, eg "
"``EXAMPLE_MOD_DIR := $(USERMOD_DIR)``"
msgstr ""
"``$(USERMOD_DIR)`` は micropython.mk 内で利用可能で、モジュールのディレクトリパスを示します。"
"これは各 C モジュールに対して再定義されるので、``micropython.mk`` の中でローカルの make 変数に"
"展開しておくべきです。たとえば ``EXAMPLE_MOD_DIR := $(USERMOD_DIR)`` とします。"

#: ../../develop/cmodules.rst:41
msgid ""
"Your ``micropython.mk`` must add your modules C files relative to your "
"expanded copy of ``$(USERMOD_DIR)`` to ``SRC_USERMOD``, eg ``SRC_USERMOD "
"+= $(EXAMPLE_MOD_DIR)/example.c``"
msgstr ""
"``micropython.mk`` ではモジュールの C ファイルを ``SRC_USERMOD`` に追加する必要があります。"
"これは ``$(USERMOD_DIR)`` の展開コピーのディレクトリ中に置かれているものとして設定します。"
"たとえば ``SRC_USERMOD += $(EXAMPLE_MOD_DIR)/example.c`` のようにします。"

#: ../../develop/cmodules.rst:45
msgid ""
"If you have custom ``CFLAGS`` settings or include folders to define, "
"these should be added to ``CFLAGS_USERMOD``."
msgstr ""
"カスタムの ``CFLAGS`` 設定またはインクルードファイルのフォルダ定義がある場合には、 "
"``CFLAGS_USERMOD`` に追加します。"

#: ../../develop/cmodules.rst:48
msgid "See below for full usage example."
msgstr "完全な使用例については下記を参照してください。"

#: ../../develop/cmodules.rst:52
msgid "Basic Example"
msgstr "基本的な例"

#: ../../develop/cmodules.rst:54
msgid ""
"This simple module named ``example`` provides a single function "
"``example.add_ints(a, b)`` which adds the two integer args together and "
"returns the result."
msgstr ""
"ここでとりあげる単純な名前のモジュール ``example`` は、2つの整数引数を加算して"
"結果を返す単一の関数 ``example.add_ints(a, b)`` を提供します。"

#: ../../develop/cmodules.rst:58 ../../develop/cmodules.rst:143
msgid "Directory::"
msgstr "ディレクトリ構成::"

#: ../../develop/cmodules.rst:60
msgid ""
"example/\n"
"├── example.c\n"
"└── micropython.mk"
msgstr ""

#: ../../develop/cmodules.rst:65
msgid "``example.c``"
msgstr ""

#: ../../develop/cmodules.rst:67
msgid ""
"// Include required definitions first.\n"
"#include \"py/obj.h\"\n"
"#include \"py/runtime.h\"\n"
"#include \"py/builtin.h\"\n"
"\n"
"// This is the function which will be called from Python as "
"example.add_ints(a, b).\n"
"STATIC mp_obj_t example_add_ints(mp_obj_t a_obj, mp_obj_t b_obj) {\n"
"    // Extract the ints from the micropython input objects\n"
"    int a = mp_obj_get_int(a_obj);\n"
"    int b = mp_obj_get_int(b_obj);\n"
"\n"
"    // Calculate the addition and convert to MicroPython object.\n"
"    return mp_obj_new_int(a + b);\n"
"}\n"
"// Define a Python reference to the function above\n"
"STATIC MP_DEFINE_CONST_FUN_OBJ_2(example_add_ints_obj, example_add_ints);"
"\n"
"\n"
"// Define all properties of the example module.\n"
"// Table entries are key/value pairs of the attribute name (a string)\n"
"// and the MicroPython object reference.\n"
"// All identifiers and strings are written as MP_QSTR_xxx and will be\n"
"// optimized to word-sized integers by the build system (interned "
"strings).\n"
"STATIC const mp_rom_map_elem_t example_module_globals_table[] = {\n"
"    { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_example) },\n"
"    { MP_ROM_QSTR(MP_QSTR_add_ints), MP_ROM_PTR(&example_add_ints_obj) },"
"\n"
"};\n"
"STATIC MP_DEFINE_CONST_DICT(example_module_globals, "
"example_module_globals_table);\n"
"\n"
"// Define module object.\n"
"const mp_obj_module_t example_user_cmodule = {\n"
"    .base = { &mp_type_module },\n"
"    .globals = (mp_obj_dict_t*)&example_module_globals,\n"
"};\n"
"\n"
"// Register the module to make it available in Python\n"
"MP_REGISTER_MODULE(MP_QSTR_example, example_user_cmodule, "
"MODULE_EXAMPLE_ENABLED);"
msgstr ""
"// 第一に必要となるインクルードファイル\n"
"#include \"py/obj.h\"\n"
"#include \"py/runtime.h\"\n"
"#include \"py/builtin.h\"\n"
"\n"
"// Python から example.add_ints(a, b) として呼び出す関数\n"
"STATIC mp_obj_t example_add_ints(mp_obj_t a_obj, mp_obj_t b_obj) {\n"
"    // MicroPython の入力オブジェクトから int 値を取得\n"
"    int a = mp_obj_get_int(a_obj);\n"
"    int b = mp_obj_get_int(b_obj);\n"
"\n"
"    // 加算を行い、MicroPython オブジェクトに変換\n"
"    return mp_obj_new_int(a + b);\n"
"}\n"
"// 上記の関数への Python 参照を定義\n"
"STATIC MP_DEFINE_CONST_FUN_OBJ_2(example_add_ints_obj, example_add_ints);"
"\n"
"\n"
"// example モジュールのすべてのプロパティを定義。\n"
"// テーブルのエントリは、属性名(文字列)と MicroPython オブジェクト参照の\n"
"// キー/値のペア。\n"
"// すべての識別子と文字列は MP_QSTR_xxx として書き、ビルドシステムによって"
"// ワードサイズの整数に最適化されます(内部文字列)。\n"
"STATIC const mp_rom_map_elem_t example_module_globals_table[] = {\n"
"    { MP_ROM_QSTR(MP_QSTR___name__), MP_ROM_QSTR(MP_QSTR_example) },\n"
"    { MP_ROM_QSTR(MP_QSTR_add_ints), MP_ROM_PTR(&example_add_ints_obj) },"
"\n"
"};\n"
"STATIC MP_DEFINE_CONST_DICT(example_module_globals, "
"example_module_globals_table);\n"
"\n"
"// モジュールオブジェクトを定義\n"
"const mp_obj_module_t example_user_cmodule = {\n"
"    .base = { &mp_type_module },\n"
"    .globals = (mp_obj_dict_t*)&example_module_globals,\n"
"};\n"
"\n"
"// Python で利用できるように make するようモジュールを登録\n"
"MP_REGISTER_MODULE(MP_QSTR_example, example_user_cmodule, "
"MODULE_EXAMPLE_ENABLED);"

#: ../../develop/cmodules.rst:107
msgid "``micropython.mk``"
msgstr ""

#: ../../develop/cmodules.rst:109
msgid ""
"EXAMPLE_MOD_DIR := $(USERMOD_DIR)\n"
"\n"
"# Add all C files to SRC_USERMOD.\n"
"SRC_USERMOD += $(EXAMPLE_MOD_DIR)/example.c\n"
"\n"
"# We can add our module folder to include paths if needed\n"
"# This is not actually needed in this example.\n"
"CFLAGS_USERMOD += -I$(EXAMPLE_MOD_DIR)"
msgstr ""
"EXAMPLE_MOD_DIR := $(USERMOD_DIR)\n"
"\n"
"# すべての C ファイルを SRC_USERMOD に追加\n"
"SRC_USERMOD += $(EXAMPLE_MOD_DIR)/example.c\n"
"\n"
"# 必要であればモジュールのフォルダをインクルードパスに追加\n"
"# この例では実際には必要ない\n"
"CFLAGS_USERMOD += -I$(EXAMPLE_MOD_DIR)"

#: ../../develop/cmodules.rst:120
msgid ""
"Finally you will need to define ``MODULE_EXAMPLE_ENABLED`` to 1. This can"
" be done by adding ``CFLAGS_EXTRA=-DMODULE_EXAMPLE_ENABLED=1`` to the "
"``make`` command, or editing ``mpconfigport.h`` or ``mpconfigboard.h`` to"
" add"
msgstr ""
"最後に MODULE_EXAMPLE_ENABLED を 1 に定義する必要があります。これを行うには "
"``CFLAGS_EXTRA=-DMODULE_EXAMPLE_ENABLED=1`` を ``make`` コマンドに追加するか、 "
"``mpconfigport.h`` か ``mpconfigboard.h`` を編集して次のものを追加します。"

#: ../../develop/cmodules.rst:125
msgid "#define MODULE_EXAMPLE_ENABLED (1)"
msgstr ""

#: ../../develop/cmodules.rst:129
msgid ""
"Note that the exact method depends on the port as they have different "
"structures. If not done correctly it will compile but importing will fail"
" to find the module."
msgstr ""
"ポートによって異なる構造になっているので、正しい方法はポートに依存することに注意してください。"
"適切に行われなかった場合、コンパイルはされたとしてもモジュールのインポートはできないでしょう。"

#: ../../develop/cmodules.rst:135
msgid "Compiling the cmodule into MicroPython"
msgstr "C モジュールを MicroPython にコンパイルする"

#: ../../develop/cmodules.rst:137
msgid ""
"To build such a module, compile MicroPython (see `getting started "
"<https://github.com/micropython/micropython/wiki/Getting-Started>`_) with"
" an extra ``make`` flag named ``USER_C_MODULES`` set to the directory "
"containing all modules you want included (not to the module itself). For "
"example:"
msgstr ""
"モジュールをビルドするには ``make`` コマンドに追加のフラグ ``USER_C_MODULES`` で"
"組み込みたいモジュールすべて(このモジュール自体ではない)のあるディレクトリを指定して、"
"MicroPython をコンパイルします"
"(`getting started <https://github.com/micropython/micropython/wiki/Getting-Started>`_ を参照)。"
"たとえば次のような構成の場合:"

#: ../../develop/cmodules.rst:145
msgid ""
"my_project/\n"
"├── modules/\n"
"│   └──example/\n"
"│       ├──example.c\n"
"│       └──micropython.mk\n"
"└── micropython/\n"
"    ├──ports/\n"
"   ... ├──stm32/\n"
"      ..."
msgstr ""

#: ../../develop/cmodules.rst:155
msgid "Building for stm32 port:"
msgstr "stm32 ポート用のビルド:"

#: ../../develop/cmodules.rst:157
msgid ""
"cd my_project/micropython/ports/stm32\n"
"make USER_C_MODULES=../../../modules "
"CFLAGS_EXTRA=-DMODULE_EXAMPLE_ENABLED=1 all"
msgstr ""

#: ../../develop/cmodules.rst:164
msgid "Module usage in MicroPython"
msgstr "MicroPython でのモジュールの使い方"

#: ../../develop/cmodules.rst:166
msgid ""
"Once built into your copy of MicroPython, the module implemented in "
"``example.c`` above can now be accessed in Python just like any other "
"builtin module, eg"
msgstr ""
"MicroPython 自前でビルドすると、上記で実装したモジュール　``example.c`` は、"
"他の組み込みモジュールと同じように Python でアクセスできるようになります。"
"たとえば次のように使います。"

#: ../../develop/cmodules.rst:170
msgid ""
"import example\n"
"print(example.add_ints(1, 3))\n"
"# should display 4"
msgstr ""

#: ../../develop/index.rst:2
msgid "Developing and building MicroPython"
msgstr "MicroPython の開発とビルド"

#: ../../develop/index.rst:4
msgid ""
"This chapter describes some options for extending MicroPython in C. Note "
"that it doesn't aim to be a complete guide for developing with "
"MicroPython. See the `getting started guide "
"<https://github.com/micropython/micropython/wiki/Getting-Started>`_ for "
"further information."
msgstr ""
"この章では C言語で MicroPython を拡張するためのいくつかのオプションについて説明します。"
"MicroPythonで開発するための完全なガイドになることを目的としていないことに注意してください。"
"詳細については "
"`getting started guide <https://github.com/micropython/micropython/wiki/Getting-Started>`_ "
"を参照してください。"

